{"version":3,"sources":["App.jsx","index.jsx"],"names":["goodsFromServer","SORT_BY_ALPHAB","SORT_BY_LENGTH","App","_useState","useState","_useState2","_slicedToArray","sortField","setSortField","_useState3","_useState4","isReversed","setIsReversed","isHideResetBtn","goods","goodsArr","sort","good1","good2","localeCompare","length","getSortedGoods","concat","reverse","_jsxs","className","children","_jsx","type","onClick","cn","map","good","ReactDOM","render","document","getElementById"],"mappings":"0OAMaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGIC,EAAiB,OACjBC,EAAiB,SAwBhB,IAAMC,EAAM,WACjB,IAAAC,EAAkCC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAAvCI,EAASF,EAAA,GAAEG,EAAYH,EAAA,GAC9BI,EAAoCL,oBAAS,GAAMM,EAAAJ,YAAAG,EAAA,GAA5CE,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAC1BG,EAAiBN,GAAaI,EAO9BG,EAhCR,SAAwBC,EAAUR,GAmBhC,MAlBkB,KAAdA,GACFQ,EAASC,MAAK,SAACC,EAAOC,GACpB,OAAQX,GACN,KAAKP,EACH,OAAOiB,EAAME,cAAcD,GAG7B,KAAKjB,EACH,OAAOgB,EAAMG,OAASF,EAAME,OAG9B,QACE,OAAOL,EAGb,IAGKA,CACT,CAYgBM,CAAe,GAADC,OAAKvB,GAAkBQ,GAMnD,OAJII,GACFG,EAAMS,UAINC,eAAA,OAAKC,UAAU,kBAAiBC,SAAA,CAC9BF,eAAA,OAAKC,UAAU,UAASC,SAAA,CACtBC,cAAA,UACEC,KAAK,SACLC,QAAS,kBAAMrB,EAAaR,EAAe,EAC3CyB,UAAWK,IACT,iBAAkB,CAAE,WAAYvB,IAAcP,IAC9C0B,SACH,wBAIDC,cAAA,UACEC,KAAK,SACLC,QAAS,kBAAMrB,EAAaP,EAAe,EAC3CwB,UAAWK,IACT,oBAAqB,CAAE,WAAYvB,IAAcN,IACjDyB,SACH,mBAIDC,cAAA,UACEC,KAAK,SACLC,QAAS,kBAAMjB,GAAeD,EAAW,EACzCc,UAAWK,IACT,oBAAqB,CAAE,YAAanB,IACpCe,SACH,YAIAb,GACCc,cAAA,UACEC,KAAK,SACLC,QAAS,kBA9CjBrB,EAAa,SACbI,GAAc,EA6CsB,EAC5Ba,UAAU,4BAA2BC,SACtC,aAMLC,cAAA,MAAAD,SACGZ,EAAMiB,KAAI,SAAAC,GAAI,OACbL,cAAA,MAAe,UAAQ,OAAMD,SAAEM,GAAtBA,EAAgC,QAKnD,EC5GAC,IAASC,OACPP,cAACzB,EAAG,IACJiC,SAASC,eAAe,Q","file":"static/js/main.1f83685b.chunk.js","sourcesContent":["import { useState } from 'react';\nimport cn from 'classnames';\n\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst SORT_BY_ALPHAB = 'name';\nconst SORT_BY_LENGTH = 'length';\n\nfunction getSortedGoods(goodsArr, sortField) {\n  if (sortField !== '') {\n    goodsArr.sort((good1, good2) => {\n      switch (sortField) {\n        case SORT_BY_ALPHAB: {\n          return good1.localeCompare(good2);\n        }\n\n        case SORT_BY_LENGTH: {\n          return good1.length - good2.length;\n        }\n\n        default: {\n          return goodsArr;\n        }\n      }\n    });\n  }\n\n  return goodsArr;\n}\n\nexport const App = () => {\n  const [sortField, setSortField] = useState('');\n  const [isReversed, setIsReversed] = useState(false);\n  const isHideResetBtn = sortField || isReversed;\n\n  const resetFields = () => {\n    setSortField('');\n    setIsReversed(false);\n  };\n\n  const goods = getSortedGoods([...goodsFromServer], sortField);\n\n  if (isReversed) {\n    goods.reverse();\n  }\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          onClick={() => setSortField(SORT_BY_ALPHAB)}\n          className={cn(\n            'button is-info', { 'is-light': sortField !== SORT_BY_ALPHAB },\n          )}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={() => setSortField(SORT_BY_LENGTH)}\n          className={cn(\n            'button is-success', { 'is-light': sortField !== SORT_BY_LENGTH },\n          )}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={() => setIsReversed(!isReversed)}\n          className={cn(\n            'button is-warning', { 'is-light': !isReversed },\n          )}\n        >\n          Reverse\n        </button>\n\n        {isHideResetBtn && (\n          <button\n            type=\"button\"\n            onClick={() => resetFields()}\n            className=\"button is-danger is-light\"\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {goods.map(good => (\n          <li key={good} data-cy=\"Good\">{good}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}